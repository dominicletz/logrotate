#!/usr/bin/env elixir

defmodule LogRotator do
  @moduledoc """
  Simple log rotation script that rotates and compresses the log file and deletes the original.

  Edit the following configuration variables to your liking:
  """

  @max_size 100 * 1024 * 1024
  @max_files 10
  @log_file "stdout.log"
  @compress_cmds [
    {"zstd", ["--rm"]},
    {"xz", []},
    {"gzip", []}
  ]

  defstruct [cmd: nil]

  def run() do
    cmd = Enum.find(@compress_cmds, fn {cmd, _} -> System.find_executable(cmd) end) || raise "No compression tool found"
    loop(%LogRotator{cmd: cmd})
  end

  def loop(state) do
    case IO.read(:line) do
      {:error, error} -> raise error
      :eof -> :ok
      line -> write_to_log(state, line)
    end
  end

  defp write_to_log(state, line) do
    File.write!(@log_file, line, [:append])
    rotate_if_needed(state)
    loop(state)
  end

  defp rotate_if_needed(state) do
    with {:ok, %{size: size}} when size > @max_size <- File.stat(@log_file) do
      rotate_log(state)
    end
  end

  defp rotate_log(state) do
    compressed_name = "#{@log_file}.#{:os.system_time(:seconds)}"
    File.rename(@log_file, compressed_name)

    spawn(fn ->
      {cmd, args} = state.cmd
      System.cmd(cmd, args ++ [compressed_name])
      delete_old_logs(state)
    end)
  end

  defp delete_old_logs(_state) do
    File.ls!()
      |> Enum.sort(:desc)
      |> Enum.filter(&String.starts_with?(&1, @log_file <> "."))
      |> Enum.drop(@max_files)
      |> Enum.each(&File.rm/1)
  end
end

LogRotator.run()
